import sys
import binascii
import itertools
import collections

# Constants for AES operations
S_BOX = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
]

def invert_sbox(sbox):
    return [sbox.index(x) for x in range(256)]

INV_S_BOX = invert_sbox(S_BOX)

def multiply_galois(a, b):
    product, modulus = 0, 0x11B
    for _ in range(8):
        if b & 1:
            product ^= a
        high_bit = a & 0x80
        a = (a << 1) & 0xFF
        if high_bit:
            a ^= modulus
        b >>= 1
    return product

def mix_column(column):
    return (
        multiply_galois(2, column[0]) ^ multiply_galois(3, column[1]) ^ column[2] ^ column[3],
        column[0] ^ multiply_galois(2, column[1]) ^ multiply_galois(3, column[2]) ^ column[3],
        column[0] ^ column[1] ^ multiply_galois(2, column[2]) ^ multiply_galois(3, column[3]),
        multiply_galois(3, column[0]) ^ column[1] ^ column[2] ^ multiply_galois(2, column[3])
    )

def generate_fault_matrix():
    return [mix_column([0 if i != j else 1 for i in range(4)]) for j in range(4) for _ in range(1, 256)]

FAULT_MATRIX = generate_fault_matrix()

def recover_key(correct, faulty, column_map):
    key_candidates = collections.Counter()
    for fault_effect in FAULT_MATRIX:
        product = [INV_S_BOX[correct[i] ^ faulty[i]] ^ effect for i, effect in zip(column_map, fault_effect)]
        key_candidates.update(itertools.product(*[range(256) for _ in product if set(product) == {0}]))
    return key_candidates

def find_differences(data1, data2):
    return {i for i, (a, b) in enumerate(zip(data1, data2)) if a != b}

def main(ciphertext_file, correct_cipher_hex, threshold=None):
    with open(ciphertext_file, 'r') as file:
        samples = [binascii.unhexlify(line.strip()) for line in file]

    correct_cipher = binascii.unhexlify(correct_cipher_hex)

    column_mappings = [(i, i+1, i+2, i+3) for i in range(0, 16, 4)]
    fault_groups = {mapping: [] for mapping in column_mappings}

    for sample in samples:
        faults = find_differences(sample, correct_cipher)
        for mapping in column_mappings:
            if all(index in faults for index in mapping):
                fault_groups[mapping].append(sample)

    final_key = [None] * 16
    for mapping, group in fault_groups.items():
        if group:
            key_occurrences = recover_key(correct_cipher, group[0], mapping)
            most_common_keys, count = key_occurrences.most_common(1)[0]
            if threshold is None or count >= threshold:
                for idx, key in zip(mapping, most_common_keys):
                    final_key[idx] = key

    print(f"Recovered Key: {''.join(f'{byte:02x}' for byte in final_key if byte is not None)}")

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: script.py <ciphertext_file> <correct_ciphertext_hex> [threshold]")
        sys.exit(1)
    main(sys.argv[1], sys.argv[2], int(sys.argv[3]) if len(sys.argv) > 3 else None)
